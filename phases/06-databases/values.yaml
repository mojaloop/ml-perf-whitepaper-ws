# Database values for Mojaloop Performance Testing
# This file configures MySQL and Kafka with proper node placement

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/kafka/values.yaml
kafka:
  enabled: true

  fullnameOverride: "kafka"

  listeners:
    client:
      protocol: PLAINTEXT
    controller:
      protocol: PLAINTEXT
    interbroker:
      protocol: PLAINTEXT
    external:
      protocol: PLAINTEXT

  extraConfig: |-
    offsets.topic.replication.factor=1
    default.replication.factor=1
    transaction.state.log.replication.factor=1

  controller:
    replicaCount: 1
    persistence:
      enabled: true
      size: 50Gi
    logPersistence:
      enabled: true
      size: 50Gi
    resourcesPreset: "xlarge"

    # Place Kafka controller on dedicated Kafka node
    nodeSelector:
      workload-class.mojaloop.io/KAFKA-CONTROL-PLANE: "true"

    # Tolerate the dedicated=kafka taint
    tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "kafka"
        effect: "NoSchedule"

  broker:
    replicaCount: 1
    persistence:
      enabled: true
      size: 50Gi
    resourcesPreset: "xlarge"

    # Place Kafka broker on dedicated Kafka node
    nodeSelector:
      workload-class.mojaloop.io/KAFKA-DATA-PLANE: "true"

    # Tolerate the dedicated=kafka taint
    tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "kafka"
        effect: "NoSchedule"

  ## ZooKeeper chart configuration
  ## https://github.com/bitnami/charts/blob/main/bitnami/zookeeper/values.yaml
  zookeeper:
    enabled: false
    persistence:
      enabled: false

  provisioning:
    enabled: true
    topics:
      - name: topic-transfer-prepare
        partitions: 1
        replicationFactor: 1
      - name: topic-transfer-position
        partitions: 1
        replicationFactor: 1
      - name: topic-transfer-position-batch
        partitions: 1
        replicationFactor: 1
      - name: topic-transfer-fulfil
        partitions: 1
        replicationFactor: 1
      - name: topic-notification-event
        partitions: 1
        replicationFactor: 1
      - name: topic-transfer-get
        partitions: 1
        replicationFactor: 1
      - name: topic-admin-transfer
        partitions: 1
        replicationFactor: 1
      - name: topic-quotes-post
        partitions: 1
        replicationFactor: 1
      - name: topic-quotes-put
        partitions: 1
        replicationFactor: 1
      - name: topic-quotes-get
        partitions: 1
        replicationFactor: 1
      - name: topic-bulkquotes-post
        partitions: 1
        replicationFactor: 1
      - name: topic-bulkquotes-put
        partitions: 1
        replicationFactor: 1
      - name: topic-bulkquotes-get
        partitions: 1
        replicationFactor: 1
      - name: topic-bulk-prepare
        partitions: 1
        replicationFactor: 1
      - name: topic-bulk-fulfil
        partitions: 1
        replicationFactor: 1
      - name: topic-bulk-processing
        partitions: 1
        replicationFactor: 1
      - name: topic-bulk-get
        partitions: 1
        replicationFactor: 1
      - name: topic-fx-quotes-post
        partitions: 1
        replicationFactor: 1
      - name: topic-fx-quotes-put
        partitions: 1
        replicationFactor: 1
      - name: topic-fx-quotes-get
        partitions: 1
        replicationFactor: 1
    persistence:
      enabled: false

    waitForKafka: true

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/mysql/values.yaml
mysql:
  enabled: true

  tls:
    enabled: false

  fullnameOverride: "mysqldb"

  auth:
    rootPassword: "db_password"
    createDatabase: true
    database: mldb
    username: "mluser"
    password: 'ml_password'
    replicationUser: replicator
    replicationPassword: ""
    existingSecret: ""
    usePasswordFiles: false
    customPasswordFiles: {}

  ## MySQL Primary parameters
  primary:
    persistence:
      enabled: true
      size: 50Gi

    # Place MySQL on dedicated MySQL nodes
    # Using affinity to allow placement on either ALS or Central Ledger nodes
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: workload-class.mojaloop.io/RDBMS-ALS-LIVE
              operator: In
              values:
              - "true"
          - matchExpressions:
            - key: workload-class.mojaloop.io/RDBMS-CENTRAL-LEDGER-LIVE
              operator: In
              values:
              - "true"

    # Tolerate the dedicated=mysql taint
    tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "mysql"
        effect: "NoSchedule"

    extraEnvVars:
      - name: ACCOUNT_LOOKUP_DATABASE
        value: "account_lookup"
      - name: ACCOUNT_LOOKUP_USER
        value: "account_lookup"
      - name: CENTRAL_LEDGER_DATABASE
        value: "central_ledger"
      - name: CENTRAL_LEDGER_USER
        value: "central_ledger"
      - name: CONTENT_ORACLE_DATABASE
        value: "consent_oracle"
      - name: CONTENT_ORACLE_USER
        value: "consent_oracle"
      - name: AUTH_SVC_DATABASE
        value: "auth_svc"
      - name: AUTH_SVC_USER
        value: "auth_svc"
      - name: MSISDN_ORACLE_DATABASE
        value: "oracle_msisdn"
      - name: MSISDN_ORACLE_USER
        value: "oracle_msisdn"

  ## Initialize databases
  initdbScripts:
    accountLookupInit.sh: |
      #!/bin/bash
      set -e
      DB_NAME=$ACCOUNT_LOOKUP_DATABASE
      DB_USER=$ACCOUNT_LOOKUP_USER
      DB_PASS=$MYSQL_PASSWORD
      echo "******* Creating '$DB_NAME' DB with user '$DB_USER' *******"
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e \
        "DROP DATABASE IF EXISTS $DB_NAME;
        CREATE DATABASE $DB_NAME;
        DROP USER IF EXISTS $DB_USER@'%';
        CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';
        FLUSH PRIVILEGES;"
      echo "******* Database '$DB_NAME' config complete *******"

    centralLedgerInit.sh: |
      #!/bin/bash
      set -e
      DB_NAME=$CENTRAL_LEDGER_DATABASE
      DB_USER=$CENTRAL_LEDGER_USER
      DB_PASS=$MYSQL_PASSWORD
      echo "******* Creating '$DB_NAME' DB with user '$DB_USER' *******"
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e \
        "DROP DATABASE IF EXISTS $DB_NAME;
        CREATE DATABASE $DB_NAME;
        DROP USER IF EXISTS $DB_USER@'%';
        CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';
        FLUSH PRIVILEGES;"
      echo "******* Database '$DB_NAME' config complete *******"

    consentOracleInit.sh: |
      #!/bin/bash
      set -e
      DB_NAME=$CONTENT_ORACLE_DATABASE
      DB_USER=$CONTENT_ORACLE_USER
      DB_PASS=$MYSQL_PASSWORD
      echo "******* Creating '$DB_NAME' DB with user '$DB_USER' *******"
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e \
        "DROP DATABASE IF EXISTS $DB_NAME;
        CREATE DATABASE $DB_NAME;
        DROP USER IF EXISTS $DB_USER@'%';
        CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';
        FLUSH PRIVILEGES;"
      echo "******* Database '$DB_NAME' config complete *******"

    msisdnOracleInit.sh: |
      #!/bin/bash
      set -e
      DB_NAME=$MSISDN_ORACLE_DATABASE
      DB_USER=$MSISDN_ORACLE_USER
      DB_PASS=$MYSQL_PASSWORD
      echo "******* Creating '$DB_NAME' DB with user '$DB_USER' *******"
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e \
        "DROP DATABASE IF EXISTS $DB_NAME;
        CREATE DATABASE $DB_NAME;
        DROP USER IF EXISTS $DB_USER@'%';
        CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';
        FLUSH PRIVILEGES;"
      echo "******* Database '$DB_NAME' config complete *******"

    authSvcInit.sh: |-
      #!/bin/bash
      set -e
      DB_NAME=$AUTH_SVC_DATABASE
      DB_USER=$AUTH_SVC_USER
      DB_PASS=$MYSQL_PASSWORD
      echo "******* Creating '$DB_NAME' DB with user '$DB_USER' *******"
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e \
        "DROP DATABASE IF EXISTS $DB_NAME;
        CREATE DATABASE $DB_NAME;
        DROP USER IF EXISTS $DB_USER@'%';
        CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';
        FLUSH PRIVILEGES;"
      echo "******* Database '$DB_NAME' config complete *******"