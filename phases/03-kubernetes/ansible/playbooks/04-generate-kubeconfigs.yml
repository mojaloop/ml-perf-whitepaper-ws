---
- name: Generate kubeconfigs for all clusters
  hosts: localhost
  gather_facts: yes
  vars:
    config: "{{ lookup('file', '../../../02-infrastructure/config.yaml') | from_yaml }}"
    artifacts_dir: "{{ playbook_dir }}/../../../02-infrastructure/artifacts"
    kubeconfig_dir: "{{ artifacts_dir }}/kubeconfigs"
    bastion_host: "{{ hostvars[groups['bastion'][0]]['ansible_host'] }}"
    bastion_user: ubuntu

  tasks:
    - name: Create kubeconfig directory
      file:
        path: "{{ kubeconfig_dir }}"
        state: directory
        mode: '0700'

    - name: Generate kubeconfig for Switch cluster
      block:
        - name: Get MicroK8s config from primary switch node
          shell: microk8s config
          delegate_to: "{{ groups['switch'] | select('match', '.*n1$') | first }}"
          become: yes
          register: switch_config_raw
          changed_when: false

        - name: Parse switch cluster config
          set_fact:
            switch_kubeconfig: "{{ switch_config_raw.stdout | from_yaml }}"

        - name: Extract certificates for switch cluster
          set_fact:
            switch_ca_cert: "{{ switch_kubeconfig.clusters[0].cluster['certificate-authority-data'] }}"
            switch_client_cert: "{{ switch_kubeconfig.users[0].user['client-certificate-data'] }}"
            switch_client_key: "{{ switch_kubeconfig.users[0].user['client-key-data'] }}"

        - name: Generate switch cluster kubeconfig with ProxyCommand
          template:
            src: ../templates/kubeconfig-proxy.j2
            dest: "{{ kubeconfig_dir }}/kubeconfig-{{ config.k8s.switch_cluster_name }}.yaml"
            mode: '0600'
          vars:
            cluster_name: "{{ config.k8s.switch_cluster_name }}"
            api_server_host: "{{ hostvars[groups['switch'][0]]['private_ip'] }}"
            ca_cert_data: "{{ switch_ca_cert }}"
            client_cert_data: "{{ switch_client_cert }}"
            client_key_data: "{{ switch_client_key }}"

    - name: Get MicroK8s config from FSP node
      shell: microk8s config
      delegate_to: "{{ item }}"
      become: yes
      register: fsp_config_raw
      changed_when: false
      loop: "{{ groups['dfsps'] }}"

    - name: Generate kubeconfig for each FSP cluster
      template:
        src: ../templates/kubeconfig-proxy.j2
        dest: "{{ kubeconfig_dir }}/kubeconfig-{{ item.item }}.yaml"
        mode: '0600'
      vars:
        cluster_name: "{{ item.item }}"
        api_server_host: "{{ hostvars[item.item]['private_ip'] }}"
        ca_cert_data: "{{ (item.stdout | from_yaml).clusters[0].cluster['certificate-authority-data'] }}"
        client_cert_data: "{{ (item.stdout | from_yaml).users[0].user['client-certificate-data'] }}"
        client_key_data: "{{ (item.stdout | from_yaml).users[0].user['client-key-data'] }}"
      loop: "{{ fsp_config_raw.results }}"

- name: Create cluster access documentation
  hosts: localhost
  gather_facts: yes
  vars:
    config: "{{ lookup('file', '../../../02-infrastructure/config.yaml') | from_yaml }}"
    artifacts_dir: "{{ playbook_dir }}/../../../02-infrastructure/artifacts"
    kubeconfig_dir: "{{ artifacts_dir }}/kubeconfigs"
  tasks:
    - name: Create cluster access documentation
      copy:
        dest: "{{ artifacts_dir }}/k8s-access.txt"
        content: |
          ========================================================================
          Kubernetes Clusters Access Information
          Generated: {{ ansible_date_time.iso8601 }}
          ========================================================================

          PREREQUISITES:
          1. SSH config must be set up (from artifacts/ssh-config)
          2. SSH key must be available at ~/.ssh/ndelma-gtm-202504091000.pem

          SWITCH CLUSTER:
          ---------------
          Name: {{ config.k8s.switch_cluster_name }}
          Nodes: {{ groups['switch'] | join(', ') }}

          Access:
          export KUBECONFIG={{ kubeconfig_dir }}/kubeconfig-{{ config.k8s.switch_cluster_name }}.yaml
          kubectl get nodes

          FSP CLUSTERS:
          -------------
          {% for fsp in groups['dfsps'] %}
          {{ fsp }}:
            export KUBECONFIG={{ kubeconfig_dir }}/kubeconfig-{{ fsp }}.yaml
            kubectl get nodes
          {% endfor %}

          QUICK ACCESS SCRIPT:
          --------------------
          # Add to your ~/.bashrc or ~/.zshrc:

          # Switch cluster
          alias k8s-switch='export KUBECONFIG={{ kubeconfig_dir }}/kubeconfig-{{ config.k8s.switch_cluster_name }}.yaml'

          # FSP clusters
          {% for fsp in groups['dfsps'] %}
          alias k8s-{{ fsp }}='export KUBECONFIG={{ kubeconfig_dir }}/kubeconfig-{{ fsp }}.yaml'
          {% endfor %}

          # Then use:
          k8s-switch
          kubectl get nodes

          k8s-fsp101
          kubectl get nodes

          ========================================================================